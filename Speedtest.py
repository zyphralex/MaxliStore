# name: SpeedTest
# version: 1.0.0
# developer: @gemeguardian
# dependencies: speedtest-cli
# min-maxli: 26

import datetime
import time
import asyncio
import sys

STRINGS = {
    "ru": {
        "no_speedtest": (
            "‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ speedtest-cli –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞:\n"
            "pip install speedtest-cli\n\n"
            "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n"
            ".restart"
        ),
        "starting_test": "üí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...\n–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...",
        "selecting_server": "üí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...\n–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...",
        "testing_download": "üí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...\n‚¨áÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...",
        "testing_upload": "üí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...\n‚¨ÜÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–¥–∞—á–∏...",
        "finalizing_results": "üí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
        "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏:\n{}",
        "results": (
            "üìà –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n"
            "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: {download} –ú–±–∏—Ç/—Å\n"
            "‚¨ÜÔ∏è –û—Ç–¥–∞—á–∞: {upload} –ú–±–∏—Ç/—Å\n"
            "‚è≤ –ü–∏–Ω–≥: {ping:.1f} –º—Å\n\n"
            "üìç –°–µ—Ä–≤–µ—Ä: {server_name}, {server_country}\n"
            "‚öô –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {server_sponsor}\n\n"
            "üïî –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:\n"
            "üñº –§–æ—Ç–æ (5 –ú–ë): {est_5mb}\n"
            "üì¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (100 –ú–ë): {est_100mb}\n"
            "üìº HD –§–∏–ª—å–º (2 –ì–ë): {est_2gb}\n"
            "üéÆ –ò–≥—Ä–∞ (50 –ì–ë): {est_50gb}\n\n"
            "‚è≤ –¢–µ—Å—Ç –∑–∞–Ω—è–ª: {duration:.1f} —Å–µ–∫\n"
            "üóì –í—Ä–µ–º—è (–ú–°–ö): {time_msk}"
        )
    },
    "en": {
        "no_speedtest": (
            "‚ùå speedtest-cli library not found!\n\n"
            "Install:\n"
            "pip install speedtest-cli\n\n"
            "After installation, restart the bot:\n"
            ".restart"
        ),
        "starting_test": "üí¨ Running speed test...\nFinding best server...",
        "selecting_server": "üí¨ Running speed test...\nSelecting optimal server...",
        "testing_download": "üí¨ Running speed test...\n‚¨áÔ∏è Testing download speed...",
        "testing_upload": "üí¨ Running speed test...\n‚¨ÜÔ∏è Testing upload speed...",
        "finalizing_results": "üí¨ Running speed test...\nProcessing results...",
        "error": "‚ùå Speed test failed:\n{}",
        "results": (
            "üìà Internet Speed Test:\n\n"
            "‚¨áÔ∏è Download: {download} Mbps\n"
            "‚¨ÜÔ∏è Upload: {upload} Mbps\n"
            "‚è≤ Ping: {ping:.1f} ms\n\n"
            "üìç Server: {server_name}, {server_country}\n"
            "‚öô Provider: {server_sponsor}\n\n"
            "üïî Estimated download time:\n"
            "üñº Photo (5 MB): {est_5mb}\n"
            "üì¶ App (100 MB): {est_100mb}\n"
            "üìº HD Movie (2 GB): {est_2gb}\n"
            "üéÆ Game (50 GB): {est_50gb}\n\n"
            "‚è≤ Test took: {duration:.1f} sec\n"
            "üóì Time (MSK): {time_msk}"
        )
    }
}

def get_string(key, lang="ru"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏."""
    return STRINGS.get(lang, STRINGS["en"]).get(key, STRINGS["en"].get(key, ""))

def bits_to_mbps(bits):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∏—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É –≤ –ú–±–∏—Ç/—Å."""
    return round(bits / 1_000_000, 1)

def estimate_download_time(file_size_mb, download_speed_mbps):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    if download_speed_mbps <= 0:
        return "N/A"
    
    download_speed_mbs = download_speed_mbps / 8
    if download_speed_mbs <= 0:
        return "N/A"
    
    time_seconds = file_size_mb / download_speed_mbs
    
    if time_seconds < 1:
        return "< 1 —Å–µ–∫"
    elif time_seconds < 60:
        return f"{int(time_seconds)} —Å–µ–∫"
    elif time_seconds < 3600:
        minutes = int(time_seconds / 60)
        seconds = int(time_seconds % 60)
        if minutes > 0 and seconds > 0:
            return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        elif minutes > 0:
            return f"{minutes} –º–∏–Ω"
        else:
            return f"{seconds} —Å–µ–∫"
    else:
        hours = int(time_seconds / 3600)
        minutes = int((time_seconds % 3600) / 60)
        return f"{hours}—á {minutes}–º"

def get_moscow_time():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)."""
    utc_now = datetime.datetime.utcnow()
    moscow_offset = datetime.timedelta(hours=3)
    moscow_time = utc_now + moscow_offset
    return moscow_time.strftime("%d.%m.%Y %H:%M:%S")

async def speedtest_command(api, message, args):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."""
    try:
        if 'speedtest' in sys.modules:
            del sys.modules['speedtest']
        
        import speedtest
        
        if not hasattr(speedtest, 'Speedtest'):
            await api.edit(message, get_string("no_speedtest"))
            return
            
    except ImportError:
        await api.edit(message, get_string("no_speedtest"))
        return
    
    await api.edit(message, get_string("starting_test"))
    start_time = time.monotonic()
    
    try:
        st = await asyncio.to_thread(speedtest.Speedtest)
        
        await api.edit(message, get_string("selecting_server"))
        await asyncio.to_thread(st.get_best_server)
        
        await api.edit(message, get_string("testing_download"))
        await asyncio.to_thread(st.download)
        
        await api.edit(message, get_string("testing_upload"))
        await asyncio.to_thread(st.upload)
        
        await api.edit(message, get_string("finalizing_results"))
        
        end_time = time.monotonic()
        test_duration = end_time - start_time
        
        results = st.results.dict()
        
        download_speed = bits_to_mbps(results["download"])
        upload_speed = bits_to_mbps(results["upload"])
        ping = results["ping"]
        
        server = results["server"]
        server_name = server["name"]
        server_country = server["country"]
        server_sponsor = server["sponsor"]
        
        est_5mb = estimate_download_time(5, download_speed)
        est_100mb = estimate_download_time(100, download_speed)
        est_2gb = estimate_download_time(2 * 1024, download_speed)
        est_50gb = estimate_download_time(50 * 1024, download_speed)
        
        current_time_msk = get_moscow_time()
        
        result_text = get_string("results").format(
            download=download_speed,
            upload=upload_speed,
            ping=ping,
            server_name=server_name,
            server_country=server_country,
            server_sponsor=server_sponsor,
            est_5mb=est_5mb,
            est_100mb=est_100mb,
            est_2gb=est_2gb,
            est_50gb=est_50gb,
            duration=test_duration,
            time_msk=current_time_msk
        )
        
        await api.edit(message, result_text)
        
    except Exception as e:
        error_text = get_string("error").format(str(e))
        await api.edit(message, error_text)

async def register(api):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è."""
    api.register_command("speedtest", speedtest_command)
