# name: Maxli Store
# version: 1.4.1
# developer: Kerdik
# id: maxli_store
# dependencies: aiohttp
# min-maxli: 26

import aiohttp
import re
import os

# –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
REPOSITORY_URLS = [
    "https://github.com/zyphralex/MaxliStore"
]

def extract_repo_info(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ URL"""
    match = re.search(r'github\.com/([^/]+)/([^/]+)', url)
    if match:
        owner = match.group(1)
        repo_name = match.group(2)
        # –£–±–∏—Ä–∞–µ–º .git –µ—Å–ª–∏ –µ—Å—Ç—å
        repo_name = repo_name.replace('.git', '')
        return {
            "name": f"{owner}/{repo_name}",
            "path": f"{owner}/{repo_name}",
            "url": url
        }
    return None

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
REPOSITORIES = []
for url in REPOSITORY_URLS:
    repo_info = extract_repo_info(url)
    if repo_info:
        REPOSITORIES.append(repo_info)

# –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
if not REPOSITORIES:
    REPOSITORIES = [{
        "name": "zyphralex/MaxliStore",
        "path": "zyphralex/MaxliStore", 
        "url": "https://github.com/zyphralex/MaxliStore"
    }]

current_repo_index = 0

def get_current_repo():
    return REPOSITORIES[current_repo_index]

async def maxlistore_command(api, message, args):
    """–ò—â–µ—Ç –º–æ–¥—É–ª–∏ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤."""
    if not args:
        await show_help(api, message)
        return
    
    search_query = " ".join(args).lower()
    await api.edit(message, "üîç –ò—â—É –º–æ–¥—É–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")
    
    try:
        current_repo = get_current_repo()
        all_modules = await get_repo_modules(current_repo["path"])
        
        if not all_modules:
            await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\nüìÇ {current_repo['name']}")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        matched_modules = []
        for module in all_modules:
            module_name = module['name'].lower().replace('.py', '')
            if search_query in module_name:
                matched_modules.append(module)
        
        if not matched_modules:
            available_modules = "\n".join([f"‚Ä¢ {m['name'].replace('.py', '')}" for m in all_modules[:10]])
            more_text = f"\n... –∏ –µ—â–µ {len(all_modules) - 10} –º–æ–¥—É–ª–µ–π" if len(all_modules) > 10 else ""
            
            await api.edit(message, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'\n\nüìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {current_repo['name']}\n\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:\n{available_modules}{more_text}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .maxlistore_list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏")
            return
        
        if len(matched_modules) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–æ–¥—É–ª—å - —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ–º
            await download_module(api, message, matched_modules[0], current_repo)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            await show_modules_list(api, message, matched_modules, search_query, current_repo)
            
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def maxlistore_s_command(api, message, args):
    """–ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–æ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)."""
    if not args:
        await api.edit(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è: .maxlistore_s weather")
        return
    
    search_query = " ".join(args).lower()
    await api.edit(message, f"üîç –ò—â—É –º–æ–¥—É–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}'...")
    
    try:
        current_repo = get_current_repo()
        all_modules = await get_repo_modules(current_repo["path"])
        
        if not all_modules:
            await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\nüìÇ {current_repo['name']}")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        matched_modules = []
        for module in all_modules:
            module_name = module['name'].lower().replace('.py', '')
            if search_query in module_name:
                matched_modules.append(module)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        matched_modules = matched_modules[:20]
        
        if not matched_modules:
            await api.edit(message, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .maxlistore_list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await show_search_results(api, message, matched_modules, search_query, current_repo)
            
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def maxlistore_download_command(api, message, args):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞."""
    if not args or not args[0].isdigit():
        await api.edit(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è: .maxlistore_download 1")
        return
    
    module_number = int(args[0])
    search_query = " ".join(args[1:]) if len(args) > 1 else ""
    
    await api.edit(message, "üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        current_repo = get_current_repo()
        all_modules = await get_repo_modules(current_repo["path"])
        
        if not all_modules:
            await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {current_repo['name']}")
            return
        
        if search_query:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            matched_modules = []
            for module in all_modules:
                module_name = module['name'].lower().replace('.py', '')
                if search_query in module_name:
                    matched_modules.append(module)
        else:
            matched_modules = all_modules
        
        if not matched_modules or module_number < 1 or module_number > len(matched_modules):
            await api.edit(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(matched_modules) if matched_modules else 0}")
            return
        
        module = matched_modules[module_number - 1]
        await download_module(api, message, module, current_repo)
        
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

async def maxlistore_list_command(api, message, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    await api.edit(message, "üìã –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π...")
    
    try:
        current_repo = get_current_repo()
        all_modules = await get_repo_modules(current_repo["path"])
        
        if not all_modules:
            await api.edit(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {current_repo['name']}")
            return
        
        await show_all_modules(api, message, all_modules, current_repo)
        
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def maxlistore_repo_command(api, message, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    current_repo = get_current_repo()
    
    repo_info = f"""üìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

üîó –°—Å—ã–ª–∫–∞: {current_repo['url']}
üìÅ –ü—É—Ç—å: {current_repo['path']}

‚ö° –ö–æ–º–∞–Ω–¥—ã:
`.maxlistore <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ø–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π
`.maxlistore_s <—á–∞—Å—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏—è>` - –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–æ 20)
`.maxlistore_list` - –≤—Å–µ –º–æ–¥—É–ª–∏
`.maxlistore_download <–Ω–æ–º–µ—Ä>` - —Å–∫–∞—á–∞—Ç—å –º–æ–¥—É–ª—å

üí° –ü—Ä–∏–º–µ—Ä:
`.maxlistore_s weat` - –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ —Å "weat" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
`.maxlistore_download 1` - —Å–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å"""
    
    await api.edit(message, repo_info)

async def show_help(api, message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    current_repo = get_current_repo()
    
    help_text = f"""üì¶ Maxli Store - –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π

üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {current_repo['name']}

–ö–æ–º–∞–Ω–¥—ã:
`.maxlistore <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π
`.maxlistore_s <—á–∞—Å—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏—è>` - –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–æ 20)
`.maxlistore_list` - –≤—Å–µ –º–æ–¥—É–ª–∏
`.maxlistore_download <–Ω–æ–º–µ—Ä>` - —Å–∫–∞—á–∞—Ç—å –º–æ–¥—É–ª—å
`.maxlistore_repo` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
`.maxlistore weather` - –ø–æ–∏—Å–∫ –º–æ–¥—É–ª—è "weather"
`.maxlistore_s weat` - –ø–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π —Å "weat" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
`.maxlistore_s tik` - –ø–æ–∏—Å–∫ TikTok –º–æ–¥—É–ª–µ–π
`.maxlistore_list` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
`.maxlistore_download 1` - —Å–∫–∞—á–∞—Ç—å –º–æ–¥—É–ª—å ‚Ññ1"""

    await api.edit(message, help_text)

async def show_modules_list(api, message, modules, search_query, repo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
    response = [f"üì¶ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n"]
    response.append(f"üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo['name']}")
    response.append(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(modules)} –º–æ–¥—É–ª–µ–π\n")
    
    for i, module in enumerate(modules, 1):
        name = module['name'].replace('.py', '')
        size_kb = module.get('size', 0) / 1024
        
        response.append(f"{i}. {name}")
        response.append(f"   üìè {size_kb:.1f} KB")
        response.append(f"   üíæ `.maxlistore_download {i}`")
        response.append("")
    
    await api.edit(message, "\n".join(response))

async def show_search_results(api, message, modules, search_query, repo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è."""
    response = [f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_query}':\n"]
    response.append(f"üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo['name']}")
    response.append(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(modules)} –º–æ–¥—É–ª–µ–π\n")
    
    for i, module in enumerate(modules, 1):
        name = module['name'].replace('.py', '')
        size_kb = module.get('size', 0) / 1024
        
        # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        highlighted_name = name
        if search_query in name.lower():
            start_idx = name.lower().find(search_query)
            end_idx = start_idx + len(search_query)
            highlighted_name = (
                name[:start_idx] + 
                f"{name[start_idx:end_idx]}" + 
                name[end_idx:]
            )
        
        response.append(f"{i}. {highlighted_name}")
        response.append(f"   üìè {size_kb:.1f} KB")
        response.append(f"   üíæ `.maxlistore_download {i}`")
        response.append("")
    
    if len(modules) == 20:
        response.append("üí° –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        response.append("üîç –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    
    await api.edit(message, "\n".join(response))

async def show_all_modules(api, message, modules, repo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    modules_per_page = 15
    
    response = [f"üì¶ –í—Å–µ –º–æ–¥—É–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n"]
    response.append(f"üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo['name']}")
    response.append(f"üîó –°—Å—ã–ª–∫–∞: {repo['url']}")
    response.append(f"üìä –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {len(modules)}\n")
    
    for i, module in enumerate(modules[:modules_per_page], 1):
        name = module['name'].replace('.py', '')
        size_kb = module.get('size', 0) / 1024
        response.append(f"{i}. {name} ({size_kb:.1f} KB)")
    
    if len(modules) > modules_per_page:
        response.append(f"\n... –∏ –µ—â–µ {len(modules) - modules_per_page} –º–æ–¥—É–ª–µ–π")
    
    response.append(f"\nüí° –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: `.maxlistore_download <–Ω–æ–º–µ—Ä>`")
    response.append(f"üîç –î–ª—è –ø–æ–∏—Å–∫–∞: `.maxlistore_s <—á–∞—Å—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏—è>`")
    
    await api.edit(message, "\n".join(response))

async def download_module(api, message, module, repo):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ–¥—É–ª—å."""
    module_name = module['name'].replace('.py', '')
    await api.edit(message, f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –º–æ–¥—É–ª—å '{module_name}'...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º raw —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        download_url = module.get('download_url')
        if not download_url:
            download_url = await get_raw_download_url(module, repo["path"])
        
        if not download_url:
            await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await download_file(download_url)
        
        if not file_content:
            await api.edit(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –º–æ–¥—É–ª—è")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        temp_filename = f"{module['name']}"
        with open(temp_filename, 'w', encoding='utf-8') as f:
            f.write(file_content)
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
        chat_id = message.chat_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –¢–û–¢ –ñ–ï —á–∞—Ç
        result = await api.send_file(
            chat_id=chat_id,
            file_path=temp_filename,
            text=f"üì¶ –ú–æ–¥—É–ª—å: {module_name}\nüìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo['name']}\n‚ö° –°–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ Maxli Store"
        )
        
        # –û—á–∏—Å—Ç–∫–∞
        os.remove(temp_filename)
        
        if result:
            await api.delete(message)
        else:
            await api.edit(message, "‚úÖ –ú–æ–¥—É–ª—å —Å–∫–∞—á–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
            
    except Exception as e:
        await api.edit(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}")

async def get_repo_modules(repo_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ .py —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    try:
        api_url = f"https://api.github.com/repos/{repo_path}/contents/"
        
        async with aiohttp.ClientSession() as session:
            headers = {
                "User-Agent": "Maxli-Bot/1.0",
                "Accept": "application/vnd.github.v3+json"
            }
            
            async with session.get(api_url, headers=headers) as response:
                if response.status == 200:
                    contents = await response.json()
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ .py —Ñ–∞–π–ª—ã
                    py_files = [item for item in contents if item['type'] == 'file' and item['name'].endswith('.py')]
                    return py_files
                else:
                    return []
                    
    except Exception:
        return []

async def get_raw_download_url(module, repo_path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç raw —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    file_path = module['path']
    return f"https://raw.githubusercontent.com/{repo_path}/main/{file_path}"

async def download_file(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."""
    async with aiohttp.ClientSession() as session:
        headers = {"User-Agent": "Maxli-Bot/1.0"}
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                return await response.text()
    return None

async def register(api):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è."""
    api.register_command("maxlistore", maxlistore_command)
    api.register_command("maxlistore_s", maxlistore_s_command)
    api.register_command("maxlistore_download", maxlistore_download_command)
    api.register_command("maxlistore_list", maxlistore_list_command)
    api.register_command("maxlistore_repo", maxlistore_repo_command)